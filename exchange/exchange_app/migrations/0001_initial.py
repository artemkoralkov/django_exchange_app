# exchange/migrations/0001_initial.py

from django.db import migrations, connection


def create_exchange_tables(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute(
            """
            CREATE TABLE cash_reserves (
                currency_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                currency_name VARCHAR2(40) UNIQUE NOT NULL,
                amount_in_cash NUMBER(15, 2) DEFAULT 0,
                is_archived NUMBER(1) DEFAULT 0
            )
            """
        )
        cursor.execute(
            """
            INSERT INTO cash_reserves (currency_name, amount_in_cash)
            VALUES (%s, %s)
            """,
            ["Белорусский рубль", 1],
        )
        cursor.execute(
            """
            CREATE TABLE exchange_rates (
                rate_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                currency_id NUMBER,
                rate_to_base NUMBER(10, 4) NOT NULL,
                rate_date DATE NOT NULL,
                FOREIGN KEY (currency_id) REFERENCES cash_reserves(currency_id) ON DELETE CASCADE
            )
        """
        )
        cursor.execute(
            """
            ALTER TABLE exchange_rates
            MODIFY rate_date DEFAULT SYSDATE
        """
        )

        cursor.execute(
            """
            CREATE TABLE exchange_transactions (
                transaction_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                operator_id NUMBER NOT NULL,
                currency_from_id NUMBER,
                currency_to_id NUMBER,
                amount NUMBER(15, 2) NOT NULL,
                exchanged_amount NUMBER(15, 2) NOT NULL,
                change_in_base NUMBER(15, 2) NOT NULL,
                transaction_date DATE DEFAULT SYSDATE,
                FOREIGN KEY (operator_id) REFERENCES auth_user(id),
                FOREIGN KEY (currency_from_id) REFERENCES cash_reserves(currency_id),
                FOREIGN KEY (currency_to_id) REFERENCES cash_reserves(currency_id)
            )
        """
        )

        cursor.execute(
            """
            CREATE OR REPLACE TRIGGER update_cash_after_exchange
            AFTER INSERT ON exchange_transactions
            FOR EACH ROW
            DECLARE
                v_amount_in_cash NUMBER(15, 2);
            BEGIN
                IF :NEW.currency_from_id != 1 THEN
                    SELECT amount_in_cash INTO v_amount_in_cash
                    FROM cash_reserves
                    WHERE currency_id = :NEW.currency_from_id;
                
                    UPDATE cash_reserves
                    SET amount_in_cash = amount_in_cash + :NEW.amount
                    WHERE currency_id = :NEW.currency_from_id;
                END IF;
               
                IF :NEW.currency_to_id != 1 THEN
                    SELECT amount_in_cash INTO v_amount_in_cash
                    FROM cash_reserves
                    WHERE currency_id = :NEW.currency_to_id;
                
                    UPDATE cash_reserves
                    SET amount_in_cash = amount_in_cash - :NEW.exchanged_amount
                    WHERE currency_id = :NEW.currency_to_id;
                END IF; 
            END;
        """
        )


def reverse_create_exchange_tables(apps, schema_editor):
    with connection.cursor() as cursor:
        cursor.execute("DROP TRIGGER update_cash_after_exchange")
        cursor.execute("DROP TABLE exchange_transactions")
        cursor.execute("DROP TABLE exchange_rates")


class Migration(migrations.Migration):
    dependencies = []

    operations = [
        migrations.RunPython(create_exchange_tables, reverse_create_exchange_tables),
    ]
